---
description:
globs:
alwaysApply: false
---
**JHipster Flights Microservice Structure Overview**

This document provides a detailed overview of the Flights microservice structure in the JHipster-generated project. The Flights service is responsible for managing flight-related operations including search, booking, ticketing, and payment processing.

## Technology Stack

The Flights microservice is built with the following key technologies:

1. **Java**: Core programming language
2. **Spring Boot**: Framework for creating standalone Spring applications
3. **Spring Cloud**: Provides tools for microservice architecture
4. **Spring Security**: For authentication and authorization
5. **Spring Kafka**: For event-driven messaging between services
6. **Redis**: For caching flight search results and session data
7. **Feign**: For declarative REST client
8. **Caffeine**: For in-memory caching
9. **MapStruct**: For object mapping between DTOs and domain objects
10. **Lombok**: For reducing boilerplate code
11. **JUnit & Mockito**: For unit and integration testing
12. **Swagger/OpenAPI**: For API documentation

## Directory Structure Tree

```
flights/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── vn/leap/booking1a/flights/
│   │   │       ├── aop/                    # Aspect-oriented programming components
│   │   │       ├── client/                 # API client interfaces for external services
│   │   │       ├── config/                 # Configuration classes
│   │   │       │   ├── context/            # Application context configurations
│   │   │       │   ├── SecurityConfiguration.java  # Security settings
│   │   │       │   ├── RedisConfiguration.java     # Redis cache configuration
│   │   │       │   ├── FeignConfiguration.java     # Feign client configuration
│   │   │       │   └── ...                 # Other configurations
│   │   │       ├── dto/                    # Data Transfer Objects
│   │   │       ├── enumeration/            # Enumeration types
│   │   │       ├── helper/                 # Helper classes
│   │   │       ├── security/               # Security implementations
│   │   │       ├── service/                # Business logic services
│   │   │       │   ├── airFlightInfo/      # Flight information services
│   │   │       │   ├── ancillary/          # Ancillary services (baggage, meals, etc.)
│   │   │       │   ├── balance/            # Balance management services
│   │   │       │   ├── booking/            # Booking processing services
│   │   │       │   ├── cache/              # Cache management services
│   │   │       │   ├── emd/                # EMD services
│   │   │       │   ├── flightoffer/        # Flight offer services
│   │   │       │   ├── flightorder/        # Flight order services
│   │   │       │   ├── kafka/              # Kafka messaging services
│   │   │       │   ├── mapper/             # Object mappers
│   │   │       │   ├── payment/            # Payment processing services
│   │   │       │   ├── prebook/            # Pre-booking services
│   │   │       │   ├── pricing/            # Pricing services
│   │   │       │   ├── provider/           # Airline provider services
│   │   │       │   ├── rebook/             # Rebooking services
│   │   │       │   ├── report/             # Reporting services
│   │   │       │   ├── search/             # Flight search services
│   │   │       │   ├── ticket/             # Ticketing services
│   │   │       │   ├── voidticket/         # Void ticket services
│   │   │       │   └── ...                 # Other service components
│   │   │       ├── utils/                  # Utility classes
│   │   │       ├── web/                    # Web layer
│   │   │       │   └── rest/               # REST controllers
│   │   │       │       ├── errors/         # Error handling
│   │   │       │       ├── BookingResource.java    # Booking API endpoints
│   │   │       │       ├── FlightOfferResource.java # Flight offer API endpoints
│   │   │       │       ├── PaymentResource.java    # Payment API endpoints
│   │   │       │       └── ...             # Other REST controllers
│   │   │       ├── ApplicationWebXml.java  # Web application configuration
│   │   │       └── FlightsApp.java         # Main application class
│   │   ├── resources/                      # Application resources
│   │   │   ├── config/                     # Configuration files
│   │   │   │   ├── application.yml         # Main application configuration
│   │   │   │   ├── application-dev.yml     # Development environment config
│   │   │   │   ├── application-prod.yml    # Production environment config
│   │   │   │   └── bootstrap.yml           # Bootstrap configuration
│   │   │   ├── i18n/                       # Internationalization files
│   │   │   └── static/                     # Static resources
│   │   └── docker/                         # Docker configurations
│   └── test/                               # Test code
├── pom.xml                                 # Maven configuration
├── package.json                            # NPM dependencies
└── .openapi-generator-ignore               # OpenAPI generator configuration
```

## Key Components

### 1. Web Layer (`web/rest/`)

The web layer contains REST controllers that expose the service's API endpoints:

- **BookingResource**: Handles flight booking operations
- **FlightOfferResource**: Manages flight search and offers
- **PaymentResource**: Processes payments for bookings
- **TicketingResource**: Handles ticketing operations
- **VoidRefundResource**: Manages void and refund operations
- **CouponResource**: Handles coupon and promotional offers
- **MaskTicketResource**: Manages mask ticket operations

These controllers follow RESTful principles and use DTOs for request/response handling.

### 2. Service Layer (`service/`)

The service layer implements the core business logic:

- **Booking Services**: Process booking requests and confirmations
- **Search Services**: Handle flight search requests and results
- **Payment Services**: Process payment for flight bookings
- **Ticketing Services**: Generate and manage flight tickets
- **Provider Services**: Integrate with different airline providers
- **Pricing Services**: Handle pricing calculations and rules
- **Report Services**: Generate business reports and analytics

Each service follows the Single Responsibility Principle and focuses on a specific domain function.

### 3. Client Interfaces (`client/`)

Client interfaces integrate with external services:

- **Feign Clients**: Declarative REST clients for other microservices
- **Provider Clients**: Airline provider API integrations
- **Payment Gateway Clients**: Integration with payment processors

### 4. Configuration (`config/`)

Configuration classes define the application behavior:

- **SecurityConfiguration**: OAuth2/OpenID Connect setup
- **RedisConfiguration**: Caching configuration
- **AsyncConfiguration**: Asynchronous processing setup
- **FeignConfiguration**: Feign client configuration
- **KafkaAspectConfiguration**: Kafka messaging setup
- **LoggingConfiguration**: Logging setup and management

### 5. Data Transfer Objects (`dto/`)

DTOs facilitate data exchange between layers and services:

- **Request/Response DTOs**: For API communication
- **Flight Offer DTOs**: Flight search result representations
- **Booking DTOs**: Booking data structures
- **Payment DTOs**: Payment processing data
- **Ticketing DTOs**: Ticket generation data

### 6. Utilities (`utils/`)

Utility classes provide helper functions:

- **FlightUtils**: Flight-specific utilities
- **BookingUtils**: Booking-related helper methods
- **ValidationUtils**: Input validation utilities
- **PriceUtils**: Price calculation utilities
- **DateUtils**: Date manipulation utilities

## Key Features and Capabilities

### 1. Flight Search

- **Multi-provider Search**: Integrates with multiple airline systems
- **Caching**: Redis-based caching for improved performance
- **Search Filters**: Extensive filtering capabilities
- **Fare Rules**: Access to fare rules and conditions

### 2. Booking Management

- **Booking Creation**: Process for creating flight bookings
- **Passenger Management**: Handling passenger information
- **Contact Management**: Managing contact information
- **Itinerary Management**: Handling flight itineraries

### 3. Pricing and Payment

- **Dynamic Pricing**: Real-time pricing calculations
- **Payment Processing**: Integration with payment gateways
- **Invoice Generation**: Creation of invoices for bookings
- **Refund Processing**: Handling refunds for cancellations

### 4. Ticketing Operations

- **Ticket Issuance**: Process for issuing tickets
- **E-ticket Delivery**: Email delivery of electronic tickets
- **Mask Ticket**: Generation of mask tickets for certain providers
- **Void Tickets**: Process for voiding tickets

### 5. Post-booking Operations

- **Rebooking**: Process for changing existing bookings
- **Cancellations**: Handling booking cancellations
- **Refunds**: Processing refund requests
- **Schedule Changes**: Handling airline schedule changes

### 6. Reporting and Analytics

- **Sales Reports**: Generation of sales reports
- **Booking Analytics**: Analysis of booking patterns
- **Revenue Reports**: Reporting on revenue and financials
- **Agent Performance**: Tracking agent booking performance

## Integration Points

The Flights microservice integrates with several other systems:

1. **Airline Providers**: Direct connection to airline reservation systems
2. **Payment Service**: For payment processing
3. **Notification Service**: For sending booking confirmations and alerts
4. **User Service**: For user authentication and authorization
5. **Common Module**: For shared functionality across services

## Data Flow

The typical data flow in the Flights service follows these steps:

1. **Search Request**: Client initiates a flight search
2. **Provider Integration**: Service queries airline providers
3. **Result Aggregation**: Search results are aggregated and normalized
4. **Booking Request**: Client selects a flight and initiates booking
5. **Reservation**: Booking is created in the airline system
6. **Payment Processing**: Payment is processed
7. **Ticket Issuance**: Tickets are issued
8. **Notification**: Confirmation is sent to the customer

## Best Practices

The Flights microservice follows several best practices:

1. **API Design**
   - RESTful API principles
   - Consistent error handling
   - Proper versioning
   - Comprehensive documentation

2. **Security**
   - OAuth2/OpenID Connect authentication
   - Role-based access control
   - Input validation
   - Secure communication

3. **Performance Optimization**
   - Efficient caching strategies
   - Asynchronous processing
   - Connection pooling
   - Optimized database queries

4. **Resilience**
   - Circuit breakers for external dependencies
   - Retry mechanisms
   - Graceful degradation
   - Comprehensive error handling

5. **Monitoring and Logging**
   - Structured logging
   - Performance metrics
   - Health checks
   - Alerting mechanisms

This overview provides a comprehensive guide to the Flights microservice structure, its organization, key components, and functionality within the JHipster-generated project.
