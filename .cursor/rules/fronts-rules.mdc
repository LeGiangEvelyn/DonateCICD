---
description:
globs:
alwaysApply: false
---
**JHipster Angular Frontend Structure Overview**

This document provides a detailed overview of the Angular frontend structure in the JHipster-generated project. The frontend application follows modern Angular architecture patterns and best practices, organized in a modular and maintainable way.

## Technology Stack

The frontend is built with the following key technologies:

1. **Angular 14.2.0**: Core framework for building the application
2. **TypeScript**: Type-safe JavaScript superset
3. **Bootstrap 5.2.0**: CSS framework for responsive design
4. **PrimeNG 14.2.3**: UI component library for Angular
5. **NgBootstrap 13.0.0**: Angular-specific Bootstrap components
6. **RxJS 7.5.6**: Reactive programming library
7. **NgRx/Store**: State management (implied by project structure)
8. **Jest**: Testing framework
9. **Webpack**: Module bundler with custom configurations
10. **ngx-translate**: Internationalization support

## Directory Structure Tree

```
fronts/
├── src/
│   └── main/
│       ├── webapp/                         # Main application source code
│       │   ├── app/
│       │   │   ├── config/                 # Application configuration
│       │   │   ├── core/                   # Core functionality
│       │   │   │   ├── auth/               # Authentication services
│       │   │   │   ├── config/             # Core configuration
│       │   │   │   ├── interceptor/        # HTTP interceptors
│       │   │   │   ├── request/            # API request services
│       │   │   │   └── util/               # Utility functions
│       │   │   ├── entities/               # Domain entities and components
│       │   │   │   ├── flight-offer/       # Flight offer components
│       │   │   │   ├── booking/            # Booking components
│       │   │   │   ├── user/               # User management
│       │   │   │   ├── hotel-booking/      # Hotel booking components
│       │   │   │   └── ...                 # Other entity-specific components
│       │   │   ├── home/                   # Home page component
│       │   │   ├── layouts/                # Layout components
│       │   │   │   ├── main/               # Main layout
│       │   │   │   ├── navbar/             # Navigation bar
│       │   │   │   ├── footer/             # Footer component
│       │   │   │   └── error/              # Error pages
│       │   │   ├── login/                  # Authentication UI
│       │   │   ├── pages/                  # Application pages
│       │   │   │   ├── flight-search/      # Flight search page
│       │   │   │   ├── hotel-search/       # Hotel search page
│       │   │   │   ├── booking-confirm/    # Booking confirmation
│       │   │   │   ├── booking-detail/     # Booking details page
│       │   │   │   └── ...                 # Other page components
│       │   │   ├── shared/                 # Shared components and services
│       │   │   │   ├── components/         # Reusable UI components
│       │   │   │   ├── models/             # Shared data models
│       │   │   │   ├── pipes/              # Custom pipes
│       │   │   │   ├── services/           # Shared services
│       │   │   │   ├── alert/              # Alert components
│       │   │   │   ├── language/           # Internationalization
│       │   │   │   ├── pagination/         # Pagination components
│       │   │   │   ├── shared.module.ts    # Shared module definition
│       │   │   │   └── shared-libs.module.ts # External libraries
│       │   │   ├── app.constants.ts        # Application constants
│       │   │   ├── app.module.ts           # Main application module
│       │   │   └── app-routing.module.ts   # Application routing
│       │   ├── client/                     # Client-specific implementations
│       │   │   ├── aiviet/                 # Aiviet client customization
│       │   │   ├── bayou/                  # Bayou client customization
│       │   │   ├── demo/                   # Demo client implementation
│       │   │   │   ├── app/                # Client-specific Angular app
│       │   │   │   │   ├── config/         # Client configuration
│       │   │   │   │   ├── entities/       # Client-specific entities
│       │   │   │   │   ├── home/           # Client home page
│       │   │   │   │   ├── layouts/        # Client layouts
│       │   │   │   │   ├── login/          # Client login customization
│       │   │   │   │   ├── pages/          # Client-specific pages
│       │   │   │   │   └── shared/         # Client-specific shared components
│       │   │   │   ├── content/            # Client-specific assets
│       │   │   │   ├── i18n/               # Client-specific translations
│       │   │   │   └── index.html          # Client entry point
│       │   │   ├── daigia/                 # Daigia client customization
│       │   │   ├── dkv/                    # DKV client customization
│       │   │   ├── hpl/                    # HPL client customization
│       │   │   └── ...                     # Other client implementations
│       │   ├── content/                    # Static content (styles, images)
│       │   ├── i18n/                       # Internationalization files
│       │   ├── WEB-INF/                    # Java web configuration
│       │   ├── bootstrap.ts                # Application bootstrap
│       │   ├── index.html                  # Main HTML entry point
│       │   ├── main.ts                     # Application entry point
│       │   ├── polyfills.ts                # Browser polyfills
│       │   └── ...                         # Other configuration files
│       └── workingDir/                     # Working directory for development
│       └── docker/                         # Docker configurations for frontend
├── webpack/                                # Webpack configuration
├── angular.json                            # Angular CLI configuration
├── package.json                            # NPM dependencies and scripts
├── tsconfig.json                           # TypeScript configuration
└── pom.xml                                 # Maven build configuration
```

## Key Components

### 1. Core Module (`app/core/`)

The Core module provides essential services and functionality used across the entire application:

- **Authentication (`core/auth/`)**: Handles user authentication, authorization, and account management
- **HTTP Interceptors (`core/interceptor/`)**: Intercepts HTTP requests for error handling, authentication, etc.
- **Configuration (`core/config/`)**: Application configuration services
- **API Requests (`core/request/`)**: Base services for making API requests
- **Utilities (`core/util/`)**: Helper functions and utilities

The Core module contains singleton services that are instantiated once per application lifetime.

### 2. Shared Module (`app/shared/`)

The Shared module provides common components, directives, and pipes used across multiple feature modules:

- **Components (`shared/components/`)**: Reusable UI components
- **Pipes (`shared/pipes/`)**: Custom data transformation pipes
- **Services (`shared/services/`)**: Shared services
- **Models (`shared/models/`)**: Data models and interfaces
- **PrimeNG Module (`shared/primeng.module.ts`)**: PrimeNG UI component library configuration
- **Alert Components (`shared/alert/`)**: Alert and notification components
- **Pagination (`shared/pagination/`)**: Pagination components
- **Language (`shared/language/`)**: Internationalization components
- **Shared Libs Module (`shared-libs.module.ts`)**: External libraries configuration

The `shared.module.ts` exports these components for use in feature modules.

### 3. Feature Modules

The application is organized into multiple feature modules:

#### Entities Module (`app/entities/`)

Contains components for all domain entities with CRUD operations:

- **Flight Offers (`entities/flight-offer/`)**: Flight offer management
- **Hotel Booking (`entities/hotel-booking/`)**: Hotel booking components
- **User Management (`entities/user/`)**: User entity management
- **Orders (`entities/order/`)**: Order management
- **Booking (`entities/booking/`)**: Booking management
- **Payment (`entities/payment/`)**: Payment processing components

#### Pages Module (`app/pages/`)

Contains the main application pages and workflows:

- **Flight Search (`pages/flight-search/`)**: Flight search interface
- **Hotel Search (`pages/hotel-search/`)**: Hotel search interface
- **Booking Confirmation (`pages/booking-confirm/`)**: Booking confirmation pages
- **Booking Details (`pages/booking-detail/`)**: Booking details view
- **Account Settings (`pages/account-setting/`)**: User account settings

#### Layout Components (`app/layouts/`)

Defines the application's visual structure:

- **Main Layout (`layouts/main/`)**: Main application layout
- **Navbar (`layouts/navbar/`)**: Navigation bar
- **Footer (`layouts/footer/`)**: Application footer
- **Error Pages (`layouts/error/`)**: Error handling pages

### 4. Client-Specific Implementations (`webapp/client/`)

The `client` directory contains client-specific implementations and customizations of the base application:

- **Multiple Client Support**: Each subdirectory represents a different client or brand implementation
- **White-Label Framework**: Enables reusing core functionality while customizing UI/UX per client
- **Client Structure**: Each client follows a similar structure to the main application:
  - **App Folder**: Contains client-specific Angular modules and components
  - **Content Folder**: Client-specific assets, images, and styles
  - **i18n Folder**: Client-specific translations
  - **index.html**: Client-specific entry point

Key client implementations include:

- **Demo**: Reference implementation/template for new clients
- **HPL**: HPL client customization
- **DKV**: DKV client customization
- **Aiviet**: Aiviet client customization
- Many other client implementations (18+ different clients)

The client-specific implementations allow for:
- Custom branding and styling
- Client-specific business logic
- Custom workflows and features
- Different UI/UX experiences
- Internationalization specific to each client

### 5. Assets and Static Content

The application includes various static resources:

- **i18n (`webapp/i18n/`)**: Internationalization JSON files
- **Content (`webapp/content/`)**: Static assets including:
  - CSS/SCSS styles
  - Images and icons
  - Fonts
  - Custom stylesheets

### 6. Configuration Files

Several configuration files define the application behavior:

- **angular.json**: Angular CLI configuration
- **tsconfig.json**: TypeScript compiler options
- **package.json**: NPM dependencies and build scripts
- **webpack/**: Custom webpack configuration
- **app.constants.ts**: Application-wide constants

## Development Workflow

The frontend development workflow is managed through various NPM scripts:

1. **Development Server**: `npm run start` - Starts the development server with HMR
2. **Build**: `npm run build` - Builds the application for production
3. **Testing**: `npm run test` - Runs tests with Jest
4. **Linting**: `npm run lint` - Lints the code with ESLint
5. **Formatting**: `npm run prettier:format` - Formats code with Prettier
6. **Client Synchronization**: `npm run sync-frontend` - Synchronizes client-specific implementations

The application uses a custom webpack configuration for advanced bundling features.

## Key Features

1. **Internationalization (i18n)**
   - Multi-language support via ngx-translate
   - Language files in JSON format
   - Language selection components

2. **Authentication**
   - OAuth2/OpenID Connect integration
   - Login/logout functionality
   - Role-based access control

3. **Responsive Design**
   - Mobile-first approach with Bootstrap
   - Custom responsive components
   - Adaptive layouts

4. **UI Component Libraries**
   - PrimeNG for rich UI components
   - Custom-styled Bootstrap components
   - Font Awesome for icons

5. **State Management**
   - Services for local state management
   - Observable-based data flow with RxJS

6. **Multi-Client Architecture**
   - White-labeling support
   - Client-specific customizations
   - Shared core functionality

## Best Practices

1. **Angular Architecture**
   - Follows Angular style guide
   - Modular architecture with feature modules
   - Lazy loading for improved performance

2. **Code Organization**
   - Clear separation of concerns
   - Single responsibility principle
   - Consistent naming conventions

3. **Performance Optimization**
   - Lazy loading of modules
   - AOT compilation for production
   - Optimized bundle size with webpack

4. **Testing**
   - Unit tests with Jest
   - Component testing
   - Service testing

5. **White-Label Best Practices**
   - Core functionality in shared modules
   - Client-specific overrides in dedicated directories
   - Configuration-driven customization
   - Theme-based styling system

This overview provides a comprehensive guide to the Angular frontend structure, its organization, and development practices within the JHipster-generated project.
