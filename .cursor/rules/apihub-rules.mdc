---
description:
globs:
alwaysApply: false
---
# ApiHub Microservice: Comprehensive Structure and Rules

## Overview

The ApiHub microservice serves as a critical gateway component in the Booking1A system, managing external API communications and orchestrating service interactions. It provides a unified interface for clients to interact with internal services such as Flights, Hotels, and Managements.

## Technology Stack

- **Core**: Java 11
- **Framework**: Spring Boot 2.7.x
- **API Documentation**: SpringDoc OpenAPI (Swagger UI)
- **Security**: Spring Security, OAuth2/OIDC with Keycloak
- **Messaging**: Spring Cloud Stream, Kafka
- **Service Discovery**: Consul
- **Circuit Breaker**: Resilience4j
- **Client-side Load Balancing**: Spring Cloud LoadBalancer
- **REST Clients**: Feign
- **Caching**: Caffeine
- **Testing**: JUnit, Spring Test

## Directory Structure

```
apihub/
├── src/main/java/vn/leap/booking1a/apihub/
│   ├── client/            # Feign clients for service communication
│   │   ├── flights/       # Flight service client
│   │   │   ├── api/       # API interfaces
│   │   │   ├── model/     # Data models for API communication
│   │   │   └── constant/  # Constants for flight client
│   ├── config/            # Application configuration
│   ├── publicmodel/       # Public-facing data models
│   │   ├── flights/       # Flight-related public models
│   │   ├── login/         # Authentication models
│   │   ├── airline/       # Airline-related models
│   │   └── enumeration/   # Enum definitions
│   ├── security/          # Security configuration and utilities
│   ├── serializer/        # Custom serializers for data transformation
│   ├── service/           # Business logic services
│   ├── utils/             # Utility classes
│   └── web/               # Web layer components
│       └── rest/          # REST controllers
│           ├── flights/   # Flight-related endpoints
│           ├── authentication/ # Authentication endpoints
│           ├── common/    # Shared endpoint functionalities
│           └── errors/    # Error handling
├── src/main/resources/
│   ├── config/            # Configuration files
│   │   ├── application.yml        # Common application properties
│   │   ├── application-dev.yml    # Development environment properties
│   │   ├── application-prod.yml   # Production environment properties
│   │   ├── bootstrap.yml          # Bootstrap configuration
│   │   └── bootstrap-prod.yml     # Production bootstrap configuration
```

## Key Components

### Gateway Layer

The ApiHub acts as an API gateway that:
- Exposes a unified API for clients
- Routes requests to appropriate backend services
- Handles protocol translation when necessary
- Enforces security policies

### Client Layer

The client packages contain Feign clients that:
- Define interfaces for communicating with other services
- Handle service discovery through Consul
- Implement circuit breaking for resilience
- Map data between internal and external formats

### Service Layer

The service components:
- Implement business logic for API operations
- Orchestrate calls to multiple backend services
- Transform data between public and internal formats
- Handle error scenarios and apply fallback strategies

### Public Model Layer

Public models define:
- Data structures exposed to API consumers
- Request and response formats
- Documentation for API contracts
- Validation rules for input data

## Typical Data Flow

1. **Request Reception**:
   - External client sends request to an ApiHub endpoint
   - Request is authenticated via OAuth2/OIDC

2. **Request Processing**:
   - Controller receives the request and validates input
   - Service layer transforms the request to internal format
   - Appropriate client(s) are called to communicate with backend services

3. **Response Handling**:
   - Backend service responses are received
   - Data is transformed to the public model format
   - Response is returned to the client

## Integration Points

### Flight Service Integration

The ApiHub integrates with the Flight service through:
- Flight offer search and management
- Booking creation and modification
- Fare rules and ancillary services
- Ticket issuance and management

### Authentication Integration

The ApiHub integrates with authentication services:
- Token validation and verification
- Role-based access control
- User context propagation

## Security Guidelines

1. **Authentication**:
   - All endpoints require authentication via OAuth2/OIDC
   - Bearer token validation against Keycloak server
   - Role-based access control with fine-grained permissions

2. **Authorization**:
   - Endpoints secured with `@PreAuthorize` annotations
   - Role-based permissions (e.g., `ROLE_X_API_USER`, `ROLE_S_BOOKING`)
   - Context-aware authorization checks

3. **Data Protection**:
   - Sensitive data masked in logs
   - TLS for all communications
   - Input validation to prevent injection attacks

## API Design Rules

1. **Endpoint Structure**:
   - Follow REST principles
   - Use nouns for resources, verbs for actions
   - Group related endpoints under common path prefixes

2. **Documentation**:
   - All endpoints must have OpenAPI annotations
   - Include detailed descriptions, response codes, and examples
   - Document security requirements

3. **Versioning**:
   - API versioning via URL path (/api/v1/...)
   - Maintain backward compatibility when possible

4. **Error Handling**:
   - Consistent error response format
   - Appropriate HTTP status codes
   - Detailed error messages for clients

## Resilience Patterns

1. **Circuit Breaking**:
   - Detect and isolate failing services
   - Apply fallback strategies when services are unavailable
   - Configure timeouts appropriately

2. **Retry Mechanisms**:
   - Implement retries for transient failures
   - Use exponential backoff to prevent cascading failures
   - Set appropriate retry limits

3. **Bulkhead Pattern**:
   - Isolate service dependencies to prevent cascade failures
   - Configure thread pools for different service clients
   - Set appropriate queue sizes and rejection policies

## Logging and Monitoring

1. **Logging Guidelines**:
   - Include correlation IDs in all logs
   - Log appropriate context for requests
   - Omit sensitive information
   - Use appropriate log levels

2. **Monitoring**:
   - Expose health endpoints for service status
   - Collect metrics for API performance
   - Monitor circuit breaker statuses
   - Track service call latencies

## Performance Considerations

1. **Caching**:
   - Cache frequently accessed reference data
   - Configure appropriate TTL values
   - Implement cache invalidation strategies

2. **Request Optimization**:
   - Batch requests to backend services when possible
   - Implement request aggregation for composite APIs
   - Consider parallel processing for independent service calls

3. **Resource Management**:
   - Configure appropriate connection pool sizes
   - Monitor thread utilization
   - Set appropriate timeouts for external calls

## Development Workflow

1. **Code Standards**:
   - Follow Java coding conventions
   - Use Lombok to reduce boilerplate
   - Implement interface-based design for testability
   - Apply SOLID principles

2. **Testing Requirements**:
   - Unit tests for service and utility classes
   - Integration tests for API endpoints
   - Mock external service dependencies
   - Test fallback scenarios

3. **Documentation**:
   - Maintain up-to-date API documentation
   - Document service interactions and dependencies
   - Keep configuration documentation current

## Deployment Considerations

1. **Environment Configuration**:
   - Use profile-specific YAML files
   - Externalize secrets and credentials
   - Configure for different deployment environments

2. **Containerization**:
   - Provide Dockerfile for containerized deployment
   - Define resource requirements
   - Configure health checks

3. **Scaling**:
   - Design for horizontal scaling
   - Configure stateless operation
   - Consider rate limiting for API protection

## Conclusion

The ApiHub service acts as a critical integration point for the Booking1A system, providing a secure, reliable, and well-documented API gateway for clients to interact with backend services. Following these guidelines ensures consistent implementation, maintainability, and performance of the ApiHub service.
