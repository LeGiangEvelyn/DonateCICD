---
description:
globs:
alwaysApply: false
---
**JHipster Managements Microservice Structure Overview**

This document provides a detailed overview of the Managements microservice structure in the JHipster-generated project. The Managements service is unique as it is the only service in the system allowed to interact directly with the database, serving as the central data management component.

## Technology Stack

The Managements microservice is built with the following key technologies:

1. **Java**: Core programming language
2. **Spring Boot**: Framework for creating standalone Spring applications
3. **Spring Data JPA**: For database access and ORM
4. **Hibernate**: ORM implementation for entity mapping
5. **Liquibase**: For database schema migrations and version control
6. **PostgreSQL**: Relational database for persistent storage
7. **Spring Security**: For authentication and authorization
8. **Spring Cloud**: For microservice architecture support
9. **Feign**: For declarative REST client
10. **Hazelcast**: For distributed caching
11. **MapStruct**: For object mapping between DTOs and entities
12. **Lombok**: For reducing boilerplate code
13. **JUnit & Mockito**: For unit and integration testing
14. **Swagger/OpenAPI**: For API documentation

## Directory Structure Tree

```
managements/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── vn/leap/booking1a/managements/
│   │   │       ├── aop/                    # Aspect-oriented programming components
│   │   │       ├── auditing/               # Auditing functionality
│   │   │       ├── client/                 # API client interfaces for external services
│   │   │       ├── config/                 # Configuration classes
│   │   │       ├── constrants/             # Constants definitions
│   │   │       ├── domain/                 # JPA entity definitions
│   │   │       │   ├── enumeration/        # Enumeration types
│   │   │       │   └── convertor/          # Type converters
│   │   │       ├── exceptions/             # Custom exception classes
│   │   │       ├── filter/                 # Request filters
│   │   │       ├── helper/                 # Helper classes
│   │   │       ├── repository/             # Spring Data JPA repositories
│   │   │       │   └── corporate/          # Corporate-specific repositories
│   │   │       ├── security/               # Security implementations
│   │   │       ├── serializer/             # Data serializers
│   │   │       ├── service/                # Business logic services
│   │   │       ├── utils/                  # Utility classes
│   │   │       ├── web/                    # Web layer
│   │   │       │   └── rest/               # REST controllers
│   │   │       ├── ApplicationWebXml.java  # Web application configuration
│   │   │       └── ManagementsApp.java     # Main application class
│   │   ├── resources/
│   │   │   ├── config/                     # Configuration files
│   │   │   │   ├── liquibase/              # Database migration scripts
│   │   │   │   │   ├── common/             # Common migration scripts
│   │   │   │   │   └── master.xml          # Liquibase master changelog
│   │   │   │   ├── application.yml         # Main application configuration
│   │   │   │   ├── application-dev.yml     # Development environment config
│   │   │   │   └── application-prod.yml    # Production environment config
│   │   │   ├── i18n/                       # Internationalization files
│   │   │   └── static/                     # Static resources
│   │   └── docker/                         # Docker configurations
│   └── test/                               # Test code
├── entities.jdl                            # JHipster Domain Language entity definitions
├── pom.xml                                 # Maven configuration
└── package.json                            # NPM dependencies
```

## Key Components

### 1. Domain Layer (`domain/`)

The domain layer contains JPA entity definitions that map directly to database tables:

- **Entity Classes**: Java classes with JPA annotations that define the database schema
  - Examples: `Booking.java`, `User.java`, `Policy.java`, `Order.java`
- **Enumeration Types**: Type-safe enumerations for domain concepts
- **Type Converters**: Custom converters for complex data types

Each entity class defines a table structure, relationships, and constraints. This layer represents the data model of the entire system.

### 2. Repository Layer (`repository/`)

The repository layer provides Spring Data JPA repositories for database operations:

- **Standard Repositories**: Basic CRUD operations for entities
  - Examples: `BookingRepository.java`, `UserRepository.java`, `PolicyRepository.java`
- **Custom Repositories**: Repositories with custom query methods
- **Relationship Repositories**: Special repositories for handling many-to-many relationships
  - Examples: `PolicyRepositoryWithBagRelationships.java`, `BookingRepositoryWithBagRelationships.java`

These repositories provide the data access layer for the entire system, encapsulating all SQL operations and database interactions.

### 3. Service Layer (`service/`)

The service layer implements the business logic and coordinates database operations:

- **Entity Services**: Services for managing specific entities
- **Cross-Entity Services**: Services that coordinate operations across multiple entities
- **Integration Services**: Services that handle integration with other microservices

Services utilize repositories to perform database operations and implement business rules.

### 4. Web Layer (`web/rest/`)

The web layer exposes REST APIs for other services to access the data:

- **Resource Controllers**: REST controllers for entity operations
  - Examples: `BookingResource.java`, `UserResource.java`, `PolicyResource.java`
- **Query Endpoints**: Endpoints for complex queries and reporting
- **Administrative Endpoints**: Management operations for system administrators

These controllers provide the interface for other microservices to access and manipulate the centralized data.

### 5. Database Migration (`resources/config/liquibase/`)

Database schema evolution is managed through Liquibase:

- **Changesets**: Incremental database schema changes
- **Master Changelog**: Orchestrates the application of changesets
- **Database Setup**: Initial database structure and reference data

Liquibase ensures consistent database schema across environments and provides version control for the database structure.

### 6. Configuration (`config/`)

Configuration classes define the application behavior:

- **Database Configuration**: Data source and JPA setup
- **Security Configuration**: Authentication and authorization settings
- **Cache Configuration**: Hazelcast distributed cache setup
- **Metrics Configuration**: Performance monitoring setup

## Key Features and Capabilities

### 1. Centralized Data Management

- **Single Database Access Point**: Only microservice with direct database access
- **Data Integrity**: Ensures consistency and referential integrity
- **Transaction Management**: Handles complex transactions across multiple entities

### 2. Entity Management

- **CRUD Operations**: Create, read, update, and delete for all entities
- **Relationship Management**: Handles complex entity relationships
- **Audit Trails**: Tracks changes to critical entities

### 3. Data Access Control

- **Authorization Rules**: Controls access to data based on user roles
- **Data Filtering**: Provides tenant-specific data views
- **Data Validation**: Ensures data integrity and business rule compliance

### 4. Database Evolution

- **Schema Migrations**: Manages database schema changes
- **Version Control**: Tracks database structure changes
- **Data Migrations**: Handles data transformations during upgrades

### 5. Query and Reporting

- **Complex Queries**: Supports advanced search and filtering
- **Aggregation**: Provides data summaries and statistics
- **Analytics Support**: Foundations for business intelligence

### 6. Integration Interface

- **REST APIs**: Exposes data to other microservices
- **Data Synchronization**: Keeps the system in a consistent state
- **Event Publishing**: Notifies other services of data changes

## Integration Points

The Managements microservice integrates with several other components:

1. **Flights Service**: Provides data for flight bookings, policies, and settings
2. **Hotel Service**: Supplies hotel-related entities and configuration
3. **Payment Service**: Shares payment and transaction information
4. **User Service**: Coordinates user data and authentication
5. **Frontend Applications**: Serves data for administrative interfaces

## Data Flow

The typical data flow in the Managements service follows these steps:

1. **API Request**: Another microservice calls the Management service REST API
2. **Authorization**: Request is authorized based on service identity and permissions
3. **Service Processing**: Business logic is applied in the service layer
4. **Repository Operation**: Data is retrieved or modified through repositories
5. **Database Transaction**: Changes are committed to the database
6. **Response**: Results are returned to the calling service

## Database Design

The Managements service maintains a comprehensive database schema:

1. **Core Entities**:
   - **User & Organization**: User accounts, agencies, corporate clients
   - **Booking & Order**: Travel reservations and orders
   - **Policy & Configuration**: Business rules and system settings
   - **Location Data**: Countries, cities, airports, hotels

2. **Relationship Types**:
   - **One-to-Many**: A single entity related to multiple child entities
   - **Many-to-Many**: Complex relationships through join tables
   - **Self-References**: Hierarchical structures within the same entity

3. **Database Features**:
   - **Constraints**: Ensures data integrity
   - **Indexes**: Optimizes query performance
   - **Transactions**: Maintains data consistency

## Best Practices

The Managements microservice follows several best practices:

1. **API Design**
   - RESTful resource naming
   - Consistent response formats
   - Proper error handling
   - Comprehensive documentation

2. **Data Access Patterns**
   - Repository abstraction
   - Transaction boundaries
   - Eager vs. lazy loading optimization
   - N+1 query prevention

3. **Database Performance**
   - Efficient indexing strategy
   - Query optimization
   - Connection pooling
   - Batch processing for bulk operations

4. **Security**
   - OAuth2/OpenID Connect authentication
   - Role-based authorization
   - Data-level security
   - SQL injection prevention

5. **Data Integrity**
   - Constraint enforcement
   - Validation at multiple levels
   - Consistent transaction handling
   - Audit trails for critical operations

This overview provides a comprehensive guide to the Managements microservice structure, its organization, database design, and functionality within the JHipster-generated project. As the sole service with database access, it plays a critical role in maintaining data integrity and providing centralized data management for the entire system.
