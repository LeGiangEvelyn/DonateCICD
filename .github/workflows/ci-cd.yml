name: Java CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: donate-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  build-and-test:
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        java-version: [17]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"
          cache: "maven"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: |
          echo "=== Starting Maven Build ==="
          ./mvnw clean compile -B
          echo "=== Maven Build Completed ==="

      - name: Run Tests
        run: |
          echo "=== Starting Tests ==="
          ./mvnw test -B
          echo "=== Tests Completed ==="

      - name: Build JAR
        run: |
          echo "=== Building JAR ==="
          ./mvnw package -DskipTests -B
          echo "=== JAR Build Completed ==="

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.java-version }}
          path: target/surefire-reports/
          retention-days: 30

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar-${{ matrix.java-version }}
          path: target/*.jar
          retention-days: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          echo "=== Building Docker Image ==="
          docker build -t ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} ${{ env.APP_NAME }}:latest
          echo "=== Docker Image Built Successfully ==="

      - name: Scan Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
          format: "sarif"
          output: "trivy-image-results.sarif"

      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-image-results.sarif"

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar-17
          path: target/

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

      - name: Copy files to server
        run: |
          echo "=== Copying files to server ==="
          # Copy JAR file
          scp -i ~/.ssh/id_ed25519 target/*.jar ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/home/${{ secrets.PRODUCTION_USER }}/app.jar

          # Copy Dockerfile
          scp -i ~/.ssh/id_ed25519 Dockerfile ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/home/${{ secrets.PRODUCTION_USER }}/

      - name: Deploy using Docker
        run: |
          echo "=== Deploying to Production using Docker ==="
          echo "Deploying commit: ${{ github.sha }}"

          ssh -i ~/.ssh/id_ed25519 ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} '
            cd /home/${{ secrets.PRODUCTION_USER }}
            
            echo "Stopping existing container..."
            docker stop ${{ env.APP_NAME }} 2>/dev/null || true
            docker rm ${{ env.APP_NAME }} 2>/dev/null || true
            
            echo "Building new Docker image..."
            docker build -t ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} .
            docker tag ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} ${{ env.APP_NAME }}:latest
            
            echo "Starting new container with environment variables..."
            docker run -d \
              --name ${{ env.APP_NAME }} \
              --restart unless-stopped \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=production \
              -e JAVA_OPTS="-Xmx1g -Xms512m" \
              -e APP_NAME="${{ secrets.APP_NAME }}" \
              -e PORT="${{ secrets.PORT }}" \
              -e JDBC_DATABASE_URL="${{ secrets.JDBC_DATABASE_URL }}" \
              -e JDBC_DATABASE_USERNAME="${{ secrets.JDBC_DATABASE_USERNAME }}" \
              -e JDBC_DATABASE_PASSWORD="${{ secrets.JDBC_DATABASE_PASSWORD }}" \
              -e SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}" \
              -e SLACK_SIGNING_SECRET="${{ secrets.SLACK_SIGNING_SECRET }}" \
              -e SLACK_APP_TOKEN="${{ secrets.SLACK_APP_TOKEN }}" \
              -e SLACK_DONATE_CHANNEL="${{ secrets.SLACK_DONATE_CHANNEL }}" \
              -e SLACK_APP_NAME="${{ secrets.SLACK_APP_NAME }}" \
              -e SECURITY_USERNAME="${{ secrets.SECURITY_USERNAME }}" \
              -e SECURITY_PASSWORD="${{ secrets.SECURITY_PASSWORD }}" \
              ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            
            echo "Cleaning up old images..."
            docker image prune -f
            
            echo "Waiting for container to start..."
            sleep 10
            
            echo "Checking container status..."
            if docker ps | grep -q ${{ env.APP_NAME }}; then
                echo "✅ Container is running successfully!"
                echo "Container ID: $(docker ps -q --filter name=${{ env.APP_NAME }})"
                echo "Application URL: http://localhost:8080"
            else
                echo "❌ Container failed to start"
                echo "Container logs:"
                docker logs ${{ env.APP_NAME }}
                exit 1
            fi
          '
          echo "=== Production Deployment Completed ==="

      - name: Health Check
        run: |
          echo "=== Performing Health Check ==="
          sleep 30

          for i in {1..5}; do
            if curl -f http://${{ secrets.PRODUCTION_HOST }}:8080/actuator/health; then
              echo "Health check passed!"
              break
            else
              echo "Health check attempt $i failed, retrying..."
              sleep 10
            fi
          done

          if [ $i -eq 5 ]; then
            echo "Health check failed after 5 attempts"
            exit 1
          fi

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "Commit: ${{ github.sha }}"
          echo "URL: http://${{ secrets.PRODUCTION_HOST }}:8080"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the logs for more details."
