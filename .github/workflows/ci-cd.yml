name: Java CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Add permissions to fix resource access issues
permissions:
  contents: read
  actions: read
  security-events: write
  id-token: write

env:
  APP_NAME: donate-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: |
          ./mvnw clean compile -B

      - name: Run Tests
        run: |
          ./mvnw test -B

      - name: Build JAR
        run: |
          ./mvnw package -DskipTests -B

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar
          retention-days: 1

  deploy-production:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Check if PRODUCTION_SSH_KEY is set
        run: |
          if [ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]; then
            echo "❌ PRODUCTION_SSH_KEY is empty or not set"
            exit 1
          else
            echo "✅ PRODUCTION_SSH_KEY is set"
          fi

      - name: Check if PRODUCTION_HOST is set
        run: |
          if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
            echo "❌ PRODUCTION_HOST is empty or not set"
            exit 1
          else
            echo "✅ PRODUCTION_HOST is set: ${{ secrets.PRODUCTION_HOST }}"
          fi

      - name: Check if JDBC_DATABASE_URL is set
        run: |
          if [ -z "${{ secrets.JDBC_DATABASE_URL }}" ]; then
            echo "❌ JDBC_DATABASE_URL is empty or not set"
            exit 1
          else
            echo "✅ JDBC_DATABASE_URL is set"
          fi

      - name: Check if JDBC_DATABASE_USERNAME is set
        run: |
          if [ -z "${{ secrets.JDBC_DATABASE_USERNAME }}" ]; then
            echo "❌ JDBC_DATABASE_USERNAME is empty or not set"
            exit 1
          else
            echo "✅ JDBC_DATABASE_USERNAME is set"
          fi

      - name: Check if JDBC_DATABASE_PASSWORD is set
        run: |
          if [ -z "${{ secrets.JDBC_DATABASE_PASSWORD }}" ]; then
            echo "❌ JDBC_DATABASE_PASSWORD is empty or not set"
            exit 1
          else
            echo "✅ JDBC_DATABASE_PASSWORD is set"
          fi

      - name: Check if SLACK_BOT_TOKEN is set
        run: |
          if [ -z "${{ secrets.SLACK_BOT_TOKEN }}" ]; then
            echo "❌ SLACK_BOT_TOKEN is empty or not set"
            exit 1
          else
            echo "✅ SLACK_BOT_TOKEN is set"
          fi

      - name: Check if SLACK_SIGNING_SECRET is set
        run: |
          if [ -z "${{ secrets.SLACK_SIGNING_SECRET }}" ]; then
            echo "❌ SLACK_SIGNING_SECRET is empty or not set"
            exit 1
          else
            echo "✅ SLACK_SIGNING_SECRET is set"
          fi

      - name: Check if SLACK_APP_TOKEN is set
        run: |
          if [ -z "${{ secrets.SLACK_APP_TOKEN }}" ]; then
            echo "❌ SLACK_APP_TOKEN is empty or not set"
            exit 1
          else
            echo "✅ SLACK_APP_TOKEN is set"
          fi

      - name: Check secrets availability
        run: |
          echo "Checking if secrets are available..."
          if [ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]; then
            echo "ERROR: PRODUCTION_SSH_KEY is empty or not set"
            exit 1
          fi
          if [ -z "${{ secrets.PRODUCTION_HOST }}" ]; then
            echo "ERROR: PRODUCTION_HOST is empty or not set"
            exit 1
          fi
          echo "PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}"
          echo "SSH key is set (length: ${#PRODUCTION_SSH_KEY})"

      - name: Set up SSH key
        run: |
          echo "Setting up SSH key..."
          mkdir -p ~/.ssh

          # Check if the secret is properly set
          if [ -z "${{ secrets.PRODUCTION_SSH_KEY }}" ]; then
            echo "ERROR: PRODUCTION_SSH_KEY secret is empty!"
            exit 1
          fi

          # Write the private key to file
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_ed25519_root
          chmod 600 ~/.ssh/id_ed25519_root

          # Verify the key was written correctly
          if [ ! -s ~/.ssh/id_ed25519_root ]; then
            echo "ERROR: SSH key file is empty!"
            exit 1
          fi

          echo "SSH key file created successfully"
          echo "Key file size: $(wc -c < ~/.ssh/id_ed25519_root) bytes"

          # Test the key format
          ssh-keygen -l -f ~/.ssh/id_ed25519_root || {
            echo "ERROR: Invalid SSH key format!"
            exit 1
          }

          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          echo "SSH setup completed successfully"

      - name: Debug - Check files
        run: |
          echo "Current directory: $(pwd)"
          echo "Target directory contents:"
          ls -la target/
          echo "Dockerfile exists:"
          ls -la Dockerfile

      - name: Debug - Test SSH connection
        run: |
          ssh -i ~/.ssh/id_ed25519_root -o ConnectTimeout=10 root@${{ secrets.PRODUCTION_HOST }} "echo 'SSH connection successful'"

      - name: Copy files to server
        run: |
          echo "Copying JAR file..."
          scp -v -i ~/.ssh/id_ed25519_root target/*.jar root@${{ secrets.PRODUCTION_HOST }}:/root/app.jar
          echo "Copying Dockerfile..."
          scp -v -i ~/.ssh/id_ed25519_root Dockerfile root@${{ secrets.PRODUCTION_HOST }}:/root/
          echo "Files copied successfully!"

      - name: Deploy using Docker
        run: |
          ssh -i ~/.ssh/id_ed25519_root root@${{ secrets.PRODUCTION_HOST }} '
            cd /root
            
            docker stop ${{ env.APP_NAME }} 2>/dev/null || true
            docker rm ${{ env.APP_NAME }} 2>/dev/null || true
            
            docker build -t ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} .
            docker tag ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }} ${{ env.APP_NAME }}:latest
            
            docker run -d \
              --name ${{ env.APP_NAME }} \
              --restart unless-stopped \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=production \
              -e JAVA_OPTS="-Xmx1g -Xms512m" \
              -e APP_NAME="${{ secrets.APP_NAME }}" \
              -e PORT="${{ secrets.PORT }}" \
              -e JDBC_DATABASE_URL="${{ secrets.JDBC_DATABASE_URL }}" \
              -e JDBC_DATABASE_USERNAME="${{ secrets.JDBC_DATABASE_USERNAME }}" \
              -e JDBC_DATABASE_PASSWORD="${{ secrets.JDBC_DATABASE_PASSWORD }}" \
              -e SLACK_BOT_TOKEN="${{ secrets.SLACK_BOT_TOKEN }}" \
              -e SLACK_SIGNING_SECRET="${{ secrets.SLACK_SIGNING_SECRET }}" \
              -e SLACK_APP_TOKEN="${{ secrets.SLACK_APP_TOKEN }}" \
              -e SLACK_DONATE_CHANNEL="${{ secrets.SLACK_DONATE_CHANNEL }}" \
              -e SLACK_APP_NAME="${{ secrets.SLACK_APP_NAME }}" \
              -e SECURITY_USERNAME="${{ secrets.SECURITY_USERNAME }}" \
              -e SECURITY_PASSWORD="${{ secrets.SECURITY_PASSWORD }}" \
              ${{ env.APP_NAME }}:${{ env.IMAGE_TAG }}
            
            docker image prune -f
          '

      - name: Health Check
        run: |
          sleep 30
          curl -f http://${{ secrets.PRODUCTION_HOST }}:8080/actuator/health

      - name: Notify Deployment Success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "URL: http://${{ secrets.PRODUCTION_HOST }}:8080"

      - name: Notify Deployment Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
